---
description: Comprehensive Next.js routing and navigation patterns for App Router
  and Pages Router
globs:
- '**/app/**/*'
- '**/pages/**/*'
- '**/middleware.ts'
- '**/route.ts'
- '**/layout.tsx'
- '**/page.tsx'
- '**/loading.tsx'
- '**/error.tsx'
- '**/not-found.tsx'
alwaysApply: true
tags:
- nextjs
- routing
- app-router
- pages-router
- navigation
- middleware
version: 1.0.0
lastUpdated: '2025-09-03T06:05:40.620323'
trigger: always_on
---
# General Development Rules
*Generated on 2025-09-03 06:05:40*
# Next.js Routing & Navigation Master Guide

## 🎯 Core Principles

### App Router (Recommended)
- **Server Components by default**: Fetch data directly on the server
- **Client Components when needed**: Use 'use client' for interactivity
- **Nested layouts**: Share UI between multiple pages
- **Loading states**: Built-in loading UI with loading.tsx
- **Error boundaries**: Error handling with error.tsx
- **Streaming**: Progressive page loading with Suspense

### Pages Router (Legacy)
- **File-based routing**: Automatic routing based on file structure
- **API routes**: Serverless functions in pages/api/
- **Dynamic routing**: [id].js for dynamic segments
- **Middleware**: Custom logic before page rendering

## 🏗️ App Router Structure

```
app/
├── layout.tsx          # Root layout (required)
├── page.tsx            # Home page
├── loading.tsx         # Global loading UI
├── error.tsx           # Global error UI
├── not-found.tsx       # 404 page
├── globals.css         # Global styles
├── (dashboard)/        # Route groups
│   ├── layout.tsx      # Dashboard layout
│   ├── page.tsx        # Dashboard home
│   ├── analytics/
│   │   └── page.tsx    # /analytics
│   └── settings/
│       └── page.tsx    # /settings
├── blog/
│   ├── page.tsx        # /blog
│   ├── [slug]/
│   │   └── page.tsx    # /blog/[slug]
│   └── loading.tsx     # Blog loading UI
└── api/
    └── users/
        └── route.ts    # API route
```

## 📋 Implementation Guidelines

### 1. Layout Patterns
```typescript
// app/layout.tsx - Root layout
import { Inter } from 'next/font/google'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'My App',
  description: 'Generated by Next.js',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <nav>Navigation</nav>
        {children}
        <footer>Footer</footer>
      </body>
    </html>
  )
}
```

### 2. Page Components
```typescript
// app/page.tsx - Home page
import { Suspense } from 'react'

async function getData() {
  const res = await fetch('https://api.example.com/data')
  return res.json()
}

export default async function HomePage() {
  const data = await getData()
  
  return (
    <main>
      <h1>Welcome</h1>
      <Suspense fallback={<div>Loading...</div>}>
        <DataComponent data={data} />
      </Suspense>
    </main>
  )
}
```

### 3. Dynamic Routes
```typescript
// app/blog/[slug]/page.tsx
interface Props {
  params: { slug: string }
}

export default async function BlogPost({ params }: Props) {
  const post = await getPost(params.slug)
  
  return (
    <article>
      <h1>{post.title}</h1>
      <div>{post.content}</div>
    </article>
  )
}

// Generate static params for SSG
export async function generateStaticParams() {
  const posts = await getPosts()
  return posts.map((post) => ({
    slug: post.slug,
  }))
}
```

### 4. Loading & Error States
```typescript
// app/loading.tsx
export default function Loading() {
  return <div>Loading...</div>
}

// app/error.tsx
'use client'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <div>
      <h2>Something went wrong!</h2>
      <button onClick={() => reset()}>Try again</button>
    </div>
  )
}
```

### 5. Middleware
```typescript
// middleware.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // Add custom logic here
  const response = NextResponse.next()
  
  // Example: Add custom header
  response.headers.set('x-custom-header', 'value')
  
  return response
}

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
}
```

## 🚀 Advanced Patterns

### Route Groups
```typescript
// app/(marketing)/layout.tsx
export default function MarketingLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="marketing-layout">
      {children}
    </div>
  )
}
```

### Parallel Routes
```typescript
// app/@analytics/page.tsx
export default function Analytics() {
  return <div>Analytics</div>
}

// app/@dashboard/page.tsx
export default function Dashboard() {
  return <div>Dashboard</div>
}

// app/layout.tsx
export default function Layout({
  children,
  analytics,
  dashboard,
}: {
  children: React.ReactNode
  analytics: React.ReactNode
  dashboard: React.ReactNode
}) {
  return (
    <div>
      {children}
      {analytics}
      {dashboard}
    </div>
  )
}
```

### Intercepting Routes
```typescript
// app/@modal/(..)photo/[id]/page.tsx
export default function PhotoModal({
  params,
}: {
  params: { id: string }
}) {
  return <div>Modal for photo {params.id}</div>
}
```

## 🔧 Navigation Patterns

### Client-side Navigation
```typescript
'use client'

import Link from 'next/link'
import { useRouter } from 'next/navigation'

export default function Navigation() {
  const router = useRouter()
  
  return (
    <nav>
      <Link href="/">Home</Link>
      <Link href="/about">About</Link>
      <Link href="/blog">Blog</Link>
      
      <button onClick={() => router.push('/dashboard')}>
        Go to Dashboard
      </button>
    </nav>
  )
}
```

### Programmatic Navigation
```typescript
import { redirect } from 'next/navigation'

export default function Page() {
  // Server-side redirect
  redirect('/dashboard')
}
```

## ⚡ Performance Optimizations

### Static Generation
```typescript
// Generate static pages at build time
export const dynamic = 'force-static'

// Revalidate every hour
export const revalidate = 3600
```

### Streaming
```typescript
import { Suspense } from 'react'

export default function Page() {
  return (
    <div>
      <Suspense fallback={<div>Loading posts...</div>}>
        <Posts />
      </Suspense>
      <Suspense fallback={<div>Loading comments...</div>}>
        <Comments />
      </Suspense>
    </div>
  )
}
```

## 🚨 Critical Rules

**ALWAYS:**
- Use App Router for new projects
- Implement proper loading and error states
- Use Server Components by default
- Add proper TypeScript types
- Implement proper error boundaries
- Use Suspense for streaming

**NEVER:**
- Mix App Router and Pages Router in the same project
- Use 'use client' unnecessarily
- Forget to handle loading and error states
- Ignore TypeScript errors
- Use client-side data fetching when server-side is possible

## 📚 Related Concepts

- Server Components vs Client Components
- Static Site Generation (SSG)
- Server-Side Rendering (SSR)
- Incremental Static Regeneration (ISR)
- Edge Runtime
- Middleware
- API Routes
- Dynamic Imports
- Code Splitting

---
*Generated by Rules Maker with comprehensive Next.js routing knowledge on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
