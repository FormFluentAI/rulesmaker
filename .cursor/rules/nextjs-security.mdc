---
description: Next.js security patterns and best practices
globs:
- '**/*.tsx'
- '**/*.ts'
- '**/middleware.ts'
- '**/api/**/*'
alwaysApply: true
tags:
- nextjs
- security
- authentication
- validation
- csp
version: 1.0.0
lastUpdated: '2025-09-03T06:05:40.621256'
trigger: always_on
---
# General Development Rules
*Generated on 2025-09-03 06:05:40*
# Next.js Security Best Practices

## Authentication & Authorization
- Use NextAuth.js for authentication
- Implement proper session management
- Validate user permissions on server-side
- Use HTTPS in production

## Input Validation
```typescript
import { z } from 'zod'

const schema = z.object({
  email: z.string().email(),
  password: z.string().min(8)
})

export async function POST(request: Request) {
  const body = await request.json()
  const validated = schema.parse(body)
  // Process validated data
}
```

## Environment Variables
```typescript
// Never expose sensitive data to client
const serverOnlySecret = process.env.SERVER_SECRET
const publicConfig = process.env.NEXT_PUBLIC_API_URL
```

## CSRF Protection
```typescript
import { getCsrfToken } from 'next-auth/react'

export default function Form() {
  const csrfToken = getCsrfToken()
  
  return (
    <form>
      <input type="hidden" name="csrfToken" value={csrfToken} />
      {/* form fields */}
    </form>
  )
}
```

## Content Security Policy
```typescript
// next.config.js
module.exports = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'Content-Security-Policy',
            value: "default-src 'self'; script-src 'self' 'unsafe-eval' 'unsafe-inline';"
          }
        ]
      }
    ]
  }
}
```

## API Route Security
```typescript
// app/api/protected/route.ts
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'

export async function GET() {
  const session = await getServerSession(authOptions)
  
  if (!session) {
    return new Response('Unauthorized', { status: 401 })
  }
  
  // Protected logic here
}
```

## ðŸš¨ Critical Security Rules

**ALWAYS:**
- Validate all user inputs
- Use HTTPS in production
- Implement proper authentication
- Sanitize data before database operations
- Use environment variables for secrets

**NEVER:**
- Expose sensitive data to the client
- Trust user input without validation
- Store secrets in client-side code
- Skip authentication checks
- Use weak session management

---
*Generated by Rules Maker with Next.js security best practices*
