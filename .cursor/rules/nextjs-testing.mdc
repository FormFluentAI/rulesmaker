---
description: Next.js testing patterns and strategies
globs:
- '**/*.test.tsx'
- '**/*.test.ts'
- '**/*.spec.tsx'
- '**/*.spec.ts'
alwaysApply: true
tags:
- nextjs
- testing
- jest
- playwright
- testing-library
version: 1.0.0
lastUpdated: '2025-09-03T06:05:40.621567'
trigger: always_on
---
# General Development Rules
*Generated on 2025-09-03 06:05:40*
# Next.js Testing Strategies

## Testing Setup
```typescript
// jest.config.js
const nextJest = require('next/jest')

const createJestConfig = nextJest({
  dir: './',
})

const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  moduleNameMapping: {
    '^@/(.*)$': '<rootDir>/src/$1',
  },
  testEnvironment: 'jest-environment-jsdom',
}

module.exports = createJestConfig(customJestConfig)
```

## Component Testing
```typescript
import { render, screen } from '@testing-library/react'
import HomePage from '@/app/page'

describe('HomePage', () => {
  it('renders welcome message', () => {
    render(<HomePage />)
    expect(screen.getByText('Welcome')).toBeInTheDocument()
  })
})
```

## API Route Testing
```typescript
import { createMocks } from 'node-mocks-http'
import handler from '@/app/api/users/route'

describe('/api/users', () => {
  it('returns users list', async () => {
    const { req, res } = createMocks({
      method: 'GET',
    })

    await handler(req, res)
    expect(res._getStatusCode()).toBe(200)
  })
})
```

## E2E Testing
```typescript
// playwright.config.ts
import { defineConfig } from '@playwright/test'

export default defineConfig({
  testDir: './e2e',
  use: {
    baseURL: 'http://localhost:3000',
  },
})
```

## Server Component Testing
```typescript
import { render } from '@testing-library/react'
import ServerComponent from '@/app/server-component'

// Mock fetch for server components
global.fetch = jest.fn(() =>
  Promise.resolve({
    json: () => Promise.resolve({ data: 'test' }),
  })
)

describe('ServerComponent', () => {
  it('renders server component', async () => {
    const component = await ServerComponent()
    const { container } = render(component)
    expect(container).toBeInTheDocument()
  })
})
```

## ðŸš¨ Critical Testing Rules

**ALWAYS:**
- Test user interactions and workflows
- Mock external dependencies
- Test error states and edge cases
- Use proper test data setup
- Test accessibility features

**NEVER:**
- Test implementation details
- Skip error handling tests
- Use real API calls in tests
- Ignore test coverage
- Test third-party libraries

---
*Generated by Rules Maker with Next.js testing strategies*
