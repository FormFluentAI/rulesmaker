---
description: Next.js performance optimization patterns and best practices
globs:
- '**/*.tsx'
- '**/*.ts'
- '**/next.config.js'
- '**/app/**/*'
alwaysApply: true
tags:
- nextjs
- performance
- optimization
- caching
- images
version: 1.0.0
lastUpdated: '2025-09-03T06:05:40.620911'
trigger: always_on
---
# General Development Rules
*Generated on 2025-09-03 06:05:40*
# Next.js Performance Optimization

## Core Performance Principles
- Use Server Components by default
- Implement proper caching strategies
- Optimize images with next/image
- Use dynamic imports for code splitting
- Implement proper loading states

## Image Optimization
```typescript
import Image from 'next/image'

export default function OptimizedImage() {
  return (
    <Image
      src="/hero.jpg"
      alt="Hero image"
      width={800}
      height={600}
      priority
      placeholder="blur"
      blurDataURL="data:image/jpeg;base64,..."
    />
  )
}
```

## Code Splitting
```typescript
import dynamic from 'next/dynamic'

const DynamicComponent = dynamic(() => import('./HeavyComponent'), {
  loading: () => <p>Loading...</p>,
  ssr: false
})
```

## Caching Strategies
```typescript
// Static generation with revalidation
export const revalidate = 3600 // 1 hour

// Dynamic rendering with caching
const data = await fetch('https://api.example.com/data', {
  next: { revalidate: 60 }
})
```

## Bundle Analysis
```bash
npm install --save-dev @next/bundle-analyzer
```

```typescript
// next.config.js
const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
})

module.exports = withBundleAnalyzer({
  // your Next.js config
})
```

## Performance Monitoring
```typescript
// app/layout.tsx
import { SpeedInsights } from '@vercel/speed-insights/next'

export default function RootLayout({ children }) {
  return (
    <html>
      <body>
        {children}
        <SpeedInsights />
      </body>
    </html>
  )
}
```

## ðŸš¨ Critical Performance Rules

**ALWAYS:**
- Use next/image for all images
- Implement proper loading states
- Use Server Components by default
- Enable compression and caching
- Monitor Core Web Vitals

**NEVER:**
- Load unnecessary JavaScript on the client
- Use large images without optimization
- Block rendering with synchronous operations
- Ignore bundle size analysis
- Skip performance monitoring

---
*Generated by Rules Maker with Next.js performance optimization knowledge*
