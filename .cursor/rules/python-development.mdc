---
description: Python development guidelines and best practices for the rules-maker project
globs:
  - '**/*.py'
  - '**/pyproject.toml'
  - '**/requirements*.txt'
---
# Python Development Guidelines

You are an expert in Python and modern software development, with deep knowledge of best practices, design patterns, and maintainable code architecture.

## Key Principles

### 1. Code Quality
- Write clean, readable, and maintainable code
- Follow SOLID principles and design patterns
- Implement proper separation of concerns
- Use descriptive names for variables, functions, and classes

### 2. Python Best Practices
- Follow PEP 8 style guidelines consistently
- Use type hints for better code documentation
- Implement proper error handling with specific exceptions
- Use virtual environments for dependency management
- Follow the Zen of Python principles

### 3. API Development
- Implement proper HTTP status codes and error responses
- Follow RESTful principles for API design
- Include comprehensive request/response validation
- Use dependency injection and async/await patterns
- Provide automatic interactive API documentation

### 4. Database Integration
- Use proper ORM patterns with SQLAlchemy
- Implement database migrations and versioning
- Handle database connections and transactions properly
- Optimize queries for performance

## Code Style and Structure

### Project Organization
```
project/
â”œâ”€â”€ src/
â”‚   â””â”€â”€ package_name/
â”‚       â”œâ”€â”€ __init__.py
â”‚       â”œâ”€â”€ main.py
â”‚       â”œâ”€â”€ models/
â”‚       â”œâ”€â”€ routers/
â”‚       â”œâ”€â”€ services/
â”‚       â””â”€â”€ utils/
â”œâ”€â”€ tests/
â”œâ”€â”€ docs/
â”œâ”€â”€ requirements.txt
â”œâ”€â”€ pyproject.toml
â””â”€â”€ README.md
```

### Code Standards
- Use black formatter for consistent code formatting
- Implement proper logging with structured messages
- Include docstrings following Google/NumPy style
- Write comprehensive unit and integration tests

## Technology-Specific Guidelines

### FastAPI Development
- Use dependency injection for database sessions
- Implement proper authentication and authorization
- Create Pydantic models for request/response validation
- Use background tasks for long-running operations
- Implement proper CORS configuration

### Async Programming
- Use async/await patterns consistently
- Handle async context managers properly
- Implement proper error handling in async functions
- Use asyncio best practices for concurrency

## Error Handling and Validation

### Exception Management
- Create custom exception classes for specific errors
- Implement proper exception logging with context
- Use HTTP exception handlers for API errors
- Provide meaningful error messages to users

### Input Validation
- Validate all input parameters using Pydantic
- Implement proper sanitization of user input
- Use appropriate data types and constraints
- Handle edge cases and boundary conditions

## Performance Considerations

### Optimization Strategies
- Use appropriate caching mechanisms (Redis, in-memory)
- Implement database query optimization
- Use connection pooling for database connections
- Monitor and profile application performance
- Consider scalability in design decisions

### Security Best Practices
- Never store sensitive information in code
- Use environment variables for configuration
- Implement proper authentication/authorization
- Validate and sanitize all user inputs
- Use HTTPS for all API communications

## ðŸš¨ Critical Instructions

### ALWAYS:
- Validate input parameters and handle edge cases
- Include proper error handling and logging
- Test your code thoroughly with unit and integration tests
- Document complex logic and algorithms
- Use version control with meaningful commit messages
- Follow security best practices
- Return appropriate HTTP status codes
- Implement proper authentication/authorization

### NEVER:
- Ignore exceptions or use bare except clauses
- Hard-code configuration values or sensitive information
- Skip input validation and sanitization
- Use any or unknown types without proper justification
- Ignore error handling or edge cases
- Use deprecated APIs or methods
- Skip documentation for public interfaces

## Testing Guidelines

### Test Structure
- Write tests before implementing complex logic
- Use pytest for testing framework
- Implement both unit and integration tests
- Achieve minimum 90% test coverage
- Test edge cases and error conditions

### Test Organization
```python
def test_function_name():
    # Arrange
    # Act
    # Assert
    pass
```

## Deployment and DevOps

### Environment Management
- Use different configurations for dev/staging/prod
- Implement proper CI/CD pipelines
- Use Docker for containerization
- Monitor application health and performance
- Implement proper logging and alerting