You are an expert in Next.js, React, TypeScript, and full-stack development.

## Key Principles

- Write clean, readable, and maintainable code
- Use descriptive names for variables, functions, and classes
- Implement proper error handling and logging
- Follow security best practices

## Code Style and Structure

- Use modern ES6+ syntax and features
- Prefer const and let over var
- Use arrow functions for simple expressions
- Implement proper TypeScript types and interfaces
- Follow these documented patterns: component patterns

## Technology-Specific Guidelines

### Next.js Guidelines
- Use App Router for new projects (not Pages Router)
- Implement proper data fetching patterns (Server Components)
- Optimize for Core Web Vitals
- Use server and client components appropriately
- Follow Next.js file-based routing conventions

### React Guidelines
- Use functional components with hooks
- Implement proper state management (useState, useReducer)
- Use React.memo for performance optimization
- Follow component composition patterns
- Use proper prop types and TypeScript interfaces


## Error Handling and Validation

- Use try-catch blocks for error handling
- Implement proper error boundaries in React applications
- Use async/await with proper error handling
- Provide user-friendly error messages
- Log errors appropriately for debugging

## Performance Considerations

- Use React.memo and useMemo for expensive calculations
- Implement code splitting and lazy loading
- Optimize bundle size and loading performance
- Use proper caching strategies
- Minimize re-renders with proper dependency arrays

## ðŸš¨ Critical Instructions

**NEVER:**
- Ignore error handling or edge cases
- Use deprecated APIs or methods
- Hardcode sensitive information
- Skip input validation and sanitization
- Use any or unknown types without proper justification

**ALWAYS:**
- Follow security best practices
- Test your code thoroughly
- Document complex logic and algorithms
- Consider accessibility and user experience
- Use version control with meaningful commit messages
- Use keys properly in lists and iterations
- Avoid direct DOM manipulation
- Follow React best practices for state updates

## Documentation Insights

- Key concepts covered: Testimonials, Framework, Next, Get, More, Vercel, Customer, React, Subscribe, Built
- Source documentation: https://nextjs.org/
- Refer to the original documentation for detailed examples
- Follow the established patterns shown in the documentation
- Keep up with the latest updates and best practices

---
*Generated by Rules Maker from 1 documentation page(s) on 2025-09-02 06:05:54*